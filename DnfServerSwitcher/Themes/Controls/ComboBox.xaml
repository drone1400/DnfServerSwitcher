<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d">
    <d:ResourceDictionary.MergedDictionaries>
        <ResourceDictionary
            Source="pack://application:,,,/DnfServerSwitcher;component/Themes/ThemeParameters/ColorsBlueNuke.xaml" />
        <ResourceDictionary
            Source="pack://application:,,,/DnfServerSwitcher;component/Themes/ThemeParameters/ThemeSizes.xaml" />
    </d:ResourceDictionary.MergedDictionaries>

    <Style x:Key="NukedStyleComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Foreground" Value="{DynamicResource NukedBrushTextLight}" />

        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="Width" Value="Auto" />

        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            CornerRadius="5"
                            BorderBrush="{DynamicResource NukedBrushBorderLight}"
                            BorderThickness="{DynamicResource NukedControlBorderThickness}"
                            Background="{DynamicResource NukedBrushBackgroundDark}"
                            Effect="{DynamicResource NukedGlowControl}">
                        <Border x:Name="toggleBorder"
                                CornerRadius="5"
                                HorizontalAlignment="Right"
                                Width="{DynamicResource NukedSizeComboBoxToggleWidth}"
                                Margin="1"
                                BorderThickness="0"
                                BorderBrush="Transparent"
                                Background="{DynamicResource NukedBrushBackgroundLight}">
                            <Path Data="{DynamicResource NukedArrowDown}"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Center"
                                  Margin="6"
                                  Stretch="Uniform"
                                  Fill="{DynamicResource NukedBrushBackgroundDark}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="toggleBorder"
                                    Value="{DynamicResource NukedBrushBorderHighlight}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource NukedBrushBorderHighlight}" />
                            <Setter Property="Effect" TargetName="border"
                                    Value="{DynamicResource NukedGlowControlMouseOver}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource NukedBrushBorderHighlight}" />
                            <Setter Property="Effect" TargetName="border"
                                    Value="{DynamicResource NukedGlowControlMouseOver}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource NukedBrushBackgroundDarkest}" />
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource NukedBrushBorderHighlight}" />
                            <Setter Property="Effect" TargetName="border"
                                    Value="{DynamicResource NukedGlowControlMouseOver}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="BorderBrush" TargetName="border"
                                    Value="{DynamicResource NukedBrushBorderDisabled}" />
                            <Setter Property="Effect" TargetName="border"
                                    Value="{DynamicResource NukedGlowControlDisabled}" />
                            <Setter Property="Background"
                                    Value="{DynamicResource NukedBrushBackgroundDisabled}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource NukedBrushTextLightDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="NukedTemplateComboBox" TargetType="{x:Type ComboBox}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="{DynamicResource NukedSizeComboBoxToggleWidthGridLength}" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" Grid.Column="0" Grid.ColumnSpan="2" 
                   Width="{TemplateBinding ActualWidth}"
                   AllowsTransparency="true"
                   Margin="1"
                   Placement="Bottom"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Border x:Name="dropDownBorder"
                        CornerRadius="5"
                        Background="{DynamicResource NukedBrushBackgroundDarkest}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Effect="{DynamicResource NukedGlowControl}">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <ItemsPresenter x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained" />
                        </Grid>
                    </ScrollViewer>
                </Border>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                          Grid.Column="0" Grid.ColumnSpan="2"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{DynamicResource NukedStyleComboBoxToggleButton}" />
            <ContentPresenter Grid.Column="0" x:Name="contentPresenter"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                              Content="{TemplateBinding SelectionBoxItem}"
                              IsHitTestVisible="false"
                              Margin="{TemplateBinding Padding}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="99" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="NukedTemplateComboBoxEditable" TargetType="{x:Type ComboBox}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="{DynamicResource NukedSizeComboBoxToggleWidthGridLength}" />
            </Grid.ColumnDefinitions>

            <Popup x:Name="PART_Popup" Grid.Column="0" Grid.ColumnSpan="2"
                   Width="{TemplateBinding ActualWidth}"
                   AllowsTransparency="true"
                   Margin="1"
                   Placement="Bottom"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                <Border x:Name="dropDownBorder"
                        CornerRadius="5"
                        Background="{DynamicResource NukedBrushBackgroundDarkest}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Effect="{DynamicResource NukedGlowControl}">
                    <ScrollViewer x:Name="DropDownScrollViewer">
                        <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                            <ItemsPresenter x:Name="ItemsPresenter"
                                            KeyboardNavigation.DirectionalNavigation="Contained" />
                        </Grid>
                    </ScrollViewer>
                </Border>
            </Popup>
            <ToggleButton x:Name="toggleButton"
                          Grid.Column="0" Grid.ColumnSpan="2"
                          BorderBrush="{TemplateBinding BorderBrush}"
                          BorderThickness="{TemplateBinding BorderThickness}"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Style="{DynamicResource NukedStyleComboBoxToggleButton}" />
            <TextBox x:Name="PART_EditableTextBox"
                     Grid.Column="0"
                     BorderThickness="0"
                     IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                     Margin="{TemplateBinding Padding}"
                     Background="Transparent"
                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Grid>

        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="99" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="true" />
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="NukedStyleComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="Background" Value="{DynamicResource NukedBrushBackgroundDark}" />
        <Setter Property="BorderBrush" Value="{DynamicResource NukedBrushBorderLight}" />
        <Setter Property="Foreground" Value="{DynamicResource NukedBrushTextLight}" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="Padding" Value="6,3,6,3" />
        <Setter Property="Margin" Value="2" />
        <Setter Property="Height" Value="24" />
        <Setter Property="Width" Value="Auto" />

        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />

        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="Both" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />

        <Setter Property="Template" Value="{DynamicResource NukedTemplateComboBox}" />
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="Template" Value="{DynamicResource NukedTemplateComboBoxEditable}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NukedStyleComboBoxItem" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Foreground" Value="{DynamicResource NukedBrushTextLight}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="{DynamicResource NukedControlBorderThickness}" />

        <Setter Property="HorizontalContentAlignment"
                Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="VerticalContentAlignment"
                Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />

        <Setter Property="Padding" Value="4,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="border"
                            CornerRadius="5"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource NukedBrushBackgroundDark}" />
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource NukedBrushBorderHighlight}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Effect" TargetName="border"
                                    Value="{DynamicResource NukedGlowControlMouseOver}" />
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource NukedBrushBorderHighlight}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Effect" TargetName="border"
                                    Value="{DynamicResource NukedGlowControlMouseOver}" />
                            <Setter Property="BorderBrush"
                                    Value="{DynamicResource NukedBrushBorderHighlight}" />
                        </Trigger>

                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="border"
                                    Value="{DynamicResource NukedBrushTextLightDisabled}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>